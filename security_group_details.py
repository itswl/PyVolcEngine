# Example Code generated by Beijing Volcanoengine Technology.
from __future__ import print_function
import volcenginesdkcore
import volcenginesdkvpc
from volcenginesdkcore.rest import ApiException
import time
import logging
import os
import json
from configs.api_config import api_config

# 确保logs目录存在
log_dir = os.path.join(os.path.dirname(__file__), 'logs')
os.makedirs(log_dir, exist_ok=True)

# 配置日志记录
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
file_handler = logging.FileHandler(os.path.join(log_dir, 'security_group_details.log'))
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

class SecurityGroupManager:
    def __init__(self):
        self._init_client()
        self.vpc_api = volcenginesdkvpc.VPCApi()

    def _init_client(self):
        configuration = volcenginesdkcore.Configuration()
        configuration.ak = api_config['ak']
        configuration.sk = api_config['sk']
        configuration.region = api_config['region']
        configuration.client_side_validation = True
        volcenginesdkcore.Configuration.set_default(configuration)

    def get_security_group_details(self, security_group_id):
        """
        获取安全组的详细属性信息，包括安全组规则
        """
        try:
            request = volcenginesdkvpc.DescribeSecurityGroupAttributesRequest(
                security_group_id=security_group_id,
            )
            response = self.vpc_api.describe_security_group_attributes(request)
            # print(response)
            # 移除不必要的sleep
            if not hasattr(response, 'security_group_id'):
                logger.warning(f"未找到安全组 {security_group_id} 的详细信息")
                return None
            
            sg = response
            sg_details = {
                'security_group_id': sg.security_group_id,
                'security_group_name': sg.security_group_name,
                'vpc_id': sg.vpc_id,
                'description': sg.description if hasattr(sg, 'description') else '',
                'creation_time': sg.creation_time,
                'tags': sg.tags if hasattr(sg, 'tags') else [],
                'ingress_rules': [],
                'egress_rules': []
            }
            
            # 处理入站规则
            if hasattr(sg, 'permissions') and sg.permissions:
                for rule in sg.permissions:
                    rule_info = {
                        'policy': rule.policy,
                        'protocol': rule.protocol,
                        'port_range': '-1/-1' if rule.port_start == -1 and rule.port_end == -1 else f'{rule.port_start}/{rule.port_end}',
                        'cidr_ip': rule.cidr_ip if rule.cidr_ip else '',
                        'source_group_id': rule.source_group_id if hasattr(rule, 'source_group_id') and rule.source_group_id else '',
                        'prefix_list_cidrs': rule.prefix_list_cidrs if hasattr(rule, 'prefix_list_cidrs') and rule.prefix_list_cidrs else [],
                        'description': rule.description if hasattr(rule, 'description') else '',
                        'priority': rule.priority if hasattr(rule, 'priority') else 100
                    }
                    
                    if rule.direction == 'ingress':
                        sg_details['ingress_rules'].append(rule_info)
                    elif rule.direction == 'egress':
                        sg_details['egress_rules'].append(rule_info)
            
            return sg_details
            
        except ApiException as e:
            logger.error(f"获取安全组 {security_group_id} 详细信息时发生异常: {e}")
            return None

    def update_security_group_info_file(self):
        """更新网络资源信息文件，添加安全组详细信息"""
        resource_info_path = os.path.join(log_dir, 'network_resources_info.md')
        updated_info_path = os.path.join(log_dir, 'network_resources_info_updated.md')
        
        try:
            # 读取现有的网络资源信息文件
            with open(resource_info_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # 创建新文件用于写入更新后的内容
            with open(updated_info_path, 'w', encoding='utf-8') as f:
                i = 0
                while i < len(lines):
                    line = lines[i]
                    f.write(line)
                    
                    # 检测安全组ID行
                    if line.strip().startswith('- 安全组 ID:'):
                        sg_id = line.strip().split(': ')[1]
                        # 获取安全组详细信息
                        sg_details = self.get_security_group_details(sg_id)
                        
                        if sg_details and (sg_details['ingress_rules'] or sg_details['egress_rules']):
                            # 添加安全组规则信息
                            f.write("- 安全组规则:\n")
                            
                            if sg_details['ingress_rules']:
                                f.write("  - 入站规则:\n")
                                for rule in sg_details['ingress_rules']:
                                    f.write(f"    - 协议: {rule['protocol']}\n")
                                    if rule['port_range'] == '-1/-1':
                                        f.write(f"      端口范围: 全部\n")
                                    else:
                                        f.write(f"      端口范围: {rule['port_range']}\n")
                                    if rule['cidr_ip']:
                                        f.write(f"      源IP: {rule['cidr_ip']}\n")
                                    if rule['source_group_id']:
                                        f.write(f"      源安全组: {rule['source_group_id']}\n")
                                    if rule['prefix_list_cidrs']:
                                        f.write(f"      前缀列表: {', '.join(rule['prefix_list_cidrs'])}\n")
                                    f.write(f"      策略: {rule['policy']}\n")
                                    f.write(f"      优先级: {rule['priority']}\n")
                                    if rule['description']:
                                        f.write(f"      描述: {rule['description']}\n")
                            
                            if sg_details['egress_rules']:
                                f.write("  - 出站规则:\n")
                                for rule in sg_details['egress_rules']:
                                    f.write(f"    - 协议: {rule['protocol']}\n")
                                    if rule['port_range'] == '-1/-1':
                                        f.write(f"      端口范围: 全部\n")
                                    else:
                                        f.write(f"      端口范围: {rule['port_range']}\n")
                                    if rule['cidr_ip']:
                                        f.write(f"      目标IP: {rule['cidr_ip']}\n")
                                    if rule['source_group_id']:
                                        f.write(f"      目标安全组: {rule['source_group_id']}\n")
                                    if rule['prefix_list_cidrs']:
                                        f.write(f"      前缀列表: {', '.join(rule['prefix_list_cidrs'])}\n")
                                    f.write(f"      策略: {rule['policy']}\n")
                                    f.write(f"      优先级: {rule['priority']}\n")
                                    if rule['description']:
                                        f.write(f"      描述: {rule['description']}\n")
                    
                    i += 1
            
            # 替换原文件
            os.replace(updated_info_path, resource_info_path)
            logger.info(f"已成功更新网络资源信息文件，添加了安全组详细规则")
            
        except Exception as e:
            logger.error(f"更新网络资源信息文件时发生错误: {e}")

def main():
    try:
        manager = SecurityGroupManager()
        manager.update_security_group_info_file()
        logger.info("成功完成安全组详细信息的收集和记录")
    except Exception as e:
        logger.error(f"执行过程中发生错误: {e}")

if __name__ == "__main__":
    main()